{"version":3,"sources":["components/SnakeCell/index.module.scss","components/Apple/index.module.scss","components/Game/index.tsx","helpers/hooks/useInterval.ts","helpers/config.ts","helpers/hooks/useKeyDown.ts","components/Board/index.tsx","components/Apple/index.tsx","components/SnakeCell/index.tsx","index.tsx","components/Game/index.module.scss","components/Board/index.module.scss"],"names":["module","exports","Game","useState","gameStatus","setGameStatus","startGame","stopGame","className","styles","game","header","title","button","onClick","useInterval","callback","delay","savedCallback","useRef","useLayoutEffect","current","useEffect","id","setInterval","clearInterval","config","width","height","widthCount","heightCount","spaceKeyCode","leftKeyCode","topKeyCode","rightKeyCode","bottomKeyCode","tick","rightDir","leftDir","topDir","bottomDir","useKeyDown","direction","setDirection","onKeyDown","event","keyCode","document","addEventListener","removeEventListener","Board","initialDirection","initialSnakeBody","useMemo","y","x","dir","snakeBody","setSnakeBody","createApple","getRandomInteger","min","max","Math","round","random","randomX","apple","setApple","checkIfSnakeEatHerself","currentBody","collision","forEach","particle","find","currentParticle","growSnakeBody","prev","tail","length","newX","newY","newTail","gameUpdate","prevBody","newBody","i","style","board","inner","map","Apple","top","left","SnakeCell","cn","cell","horizontal","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.13181896.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"SnakeCell_cell__1Rg-H\",\"horizontal\":\"SnakeCell_horizontal__jpRGF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"apple\":\"Apple_apple__1zFMy\"};","import { useState } from \"react\";\r\nimport { Board } from \"..\";\r\nimport styles from \"./index.module.scss\";\r\n\r\nconst Game = () => {\r\n    const [gameStatus, setGameStatus] = useState(\"playing\");\r\n\r\n    const startGame = () => {\r\n        setGameStatus(\"playing\");\r\n    };\r\n\r\n    const stopGame = () => {\r\n        setGameStatus(\"stopped\");\r\n    };\r\n\r\n    return (\r\n        <div className={styles.game}>\r\n            <header className={styles.header}>\r\n                <span className={styles.title}>Snake Game</span>\r\n                <button className={styles.button} onClick={gameStatus === \"playing\" ? stopGame : startGame}>\r\n                    {gameStatus === \"playing\" ? \"Stop\" : \"Start\"}\r\n                </button>\r\n            </header>\r\n            <Board gameStatus={gameStatus} startGame={startGame} stopGame={stopGame} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n","import { useEffect, useLayoutEffect, useRef } from \"react\";\r\n\r\nfunction useInterval(callback: () => void, delay: number | null) {\r\n    const savedCallback = useRef(callback);\r\n\r\n    // Remember the latest callback if it changes.\r\n    useLayoutEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    // Set up the interval.\r\n    useEffect(() => {\r\n        // Don't schedule if no delay is specified.\r\n        // Note: 0 is a valid value for delay.\r\n        if (!delay && delay !== 0) {\r\n            return;\r\n        }\r\n\r\n        const id = setInterval(() => savedCallback.current(), delay);\r\n\r\n        return () => clearInterval(id);\r\n    }, [delay]);\r\n}\r\n\r\nexport default useInterval;\r\n","const config = {\r\n    width: 15,\r\n    height: 15,\r\n    widthCount: 20,\r\n    heightCount: 20,\r\n\r\n    spaceKeyCode: 32,\r\n    leftKeyCode: 37,\r\n    topKeyCode: 38,\r\n    rightKeyCode: 39,\r\n    bottomKeyCode: 40,\r\n\r\n    tick: 100,\r\n\r\n    rightDir: \"right\",\r\n    leftDir: \"left\",\r\n    topDir: \"top\",\r\n    bottomDir: \"bottom\"\r\n};\r\n\r\nexport default config;\r\n","import { useEffect, Dispatch, SetStateAction } from \"react\";\r\nimport { config } from \"../index\";\r\n\r\nconst { spaceKeyCode, leftKeyCode, topKeyCode, rightKeyCode, bottomKeyCode, rightDir, leftDir, topDir, bottomDir } =\r\n    config;\r\n\r\nconst useKeyDown = (direction: string, setDirection: Dispatch<SetStateAction<string>>, startGame: () => void) => {\r\n    useEffect(() => {\r\n        const onKeyDown = (event: any) => {\r\n            const { keyCode } = event;\r\n\r\n            if (keyCode === spaceKeyCode) {\r\n                startGame();\r\n            }\r\n            if (keyCode === rightKeyCode && direction !== rightDir && direction !== leftDir) {\r\n                setDirection(rightDir);\r\n            }\r\n            if (keyCode === leftKeyCode && direction !== rightDir && direction !== leftDir) {\r\n                setDirection(leftDir);\r\n            }\r\n            if (keyCode === topKeyCode && direction !== topDir && direction !== bottomDir) {\r\n                setDirection(topDir);\r\n            }\r\n            if (keyCode === bottomKeyCode && direction !== topDir && direction !== bottomDir) {\r\n                setDirection(bottomDir);\r\n            }\r\n        };\r\n\r\n        document.addEventListener(\"keydown\", onKeyDown);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", onKeyDown);\r\n        };\r\n    }, [direction, setDirection, startGame]);\r\n};\r\n\r\nexport default useKeyDown;\r\n","import { useEffect, useMemo, useState } from \"react\";\r\nimport { useInterval, useKeyDown } from \"../../helpers/hooks\";\r\nimport { config, SnakeCellType } from \"../../helpers\";\r\nimport { Apple, SnakeCell } from \"..\";\r\nimport styles from \"./index.module.scss\";\r\n\r\nconst { width, height, widthCount, heightCount, tick, rightDir, leftDir, topDir, bottomDir } = config;\r\n\r\nconst Board = ({\r\n    gameStatus,\r\n    startGame,\r\n    stopGame\r\n}: {\r\n    gameStatus: string;\r\n    startGame: () => void;\r\n    stopGame: () => void;\r\n}) => {\r\n    const initialDirection = topDir;\r\n    const initialSnakeBody: SnakeCellType[] = useMemo(\r\n        () => [\r\n            { id: 0, y: 5, x: 0, dir: initialDirection },\r\n            { id: 1, y: 5, x: 1, dir: initialDirection },\r\n            { id: 2, y: 5, x: 2, dir: initialDirection },\r\n            { id: 3, y: 5, x: 3, dir: initialDirection },\r\n            { id: 4, y: 5, x: 4, dir: initialDirection },\r\n            { id: 5, y: 5, x: 5, dir: initialDirection }\r\n        ],\r\n        [initialDirection]\r\n    );\r\n\r\n    const [snakeBody, setSnakeBody] = useState(initialSnakeBody);\r\n    const [direction, setDirection] = useState(initialDirection);\r\n    useKeyDown(direction, setDirection, startGame);\r\n\r\n    const createApple = () => {\r\n        const getRandomInteger = (min: number, max: number) => {\r\n            return Math.round(min - 0.5 + Math.random() * (max - min + 1));\r\n        };\r\n        const randomX = getRandomInteger(0, widthCount - 1);\r\n        const randomY = getRandomInteger(0, heightCount - 1);\r\n        return { id: 999, y: randomY, x: randomX };\r\n    };\r\n    const [apple, setApple] = useState(createApple());\r\n\r\n    const moveSnake = () => {\r\n        if (gameStatus !== \"stopped\") {\r\n            setSnakeBody((prevBody) => {\r\n                let newBody = [...prevBody];\r\n\r\n                if (direction === rightDir) {\r\n                    newBody[0] = { ...prevBody[0], x: prevBody[0].x + 1 >= widthCount ? 0 : prevBody[0].x + 1 };\r\n                }\r\n                if (direction === leftDir) {\r\n                    newBody[0] = { ...prevBody[0], x: prevBody[0].x - 1 < 0 ? widthCount - 1 : prevBody[0].x - 1 };\r\n                }\r\n                if (direction === bottomDir) {\r\n                    newBody[0] = { ...prevBody[0], y: prevBody[0].y + 1 >= heightCount ? 0 : prevBody[0].y + 1 };\r\n                }\r\n                if (direction === topDir) {\r\n                    newBody[0] = { ...prevBody[0], y: prevBody[0].y - 1 < 0 ? heightCount - 1 : prevBody[0].y - 1 };\r\n                }\r\n                newBody[0].dir = direction;\r\n                for (let i = 1; i < prevBody.length; i++) {\r\n                    newBody[i] = {\r\n                        id: newBody[i].id,\r\n                        x: prevBody[i - 1].x,\r\n                        y: prevBody[i - 1].y,\r\n                        dir: prevBody[i - 1].dir\r\n                    };\r\n                }\r\n\r\n                checkIfSnakeEatHerself(newBody);\r\n\r\n                return newBody;\r\n            });\r\n        }\r\n    };\r\n\r\n    const checkIfAppleWasEaten = () => {\r\n        if (snakeBody[0].x === apple.x && snakeBody[0].y === apple.y) {\r\n            setApple(createApple());\r\n            growSnakeBody();\r\n        }\r\n    };\r\n\r\n    const checkIfSnakeEatHerself = (currentBody: SnakeCellType[]) => {\r\n        let collision = false;\r\n        currentBody.forEach((particle) => {\r\n            let hasTwoParticlesCollided = currentBody.find(\r\n                (currentParticle) =>\r\n                    currentParticle.x === particle.x &&\r\n                    currentParticle.y === particle.y &&\r\n                    currentParticle.id !== particle.id\r\n            );\r\n            if (hasTwoParticlesCollided) {\r\n                collision = true;\r\n            }\r\n        });\r\n        if (collision) stopGame();\r\n    };\r\n\r\n    const growSnakeBody = () => {\r\n        setSnakeBody((prev) => {\r\n            const tail = prev[prev.length - 1];\r\n            let newX: number = tail.x,\r\n                newY: number = tail.y;\r\n            if (tail.dir === rightDir) newX--;\r\n            if (tail.dir === leftDir) newX++;\r\n            if (tail.dir === topDir) newY--;\r\n            if (tail.dir === bottomDir) newY++;\r\n\r\n            const newTail = { id: tail.id + 1, x: newX, y: newY, dir: tail.dir };\r\n            return [...prev, newTail];\r\n        });\r\n    };\r\n\r\n    const gameUpdate = () => {\r\n        moveSnake();\r\n        checkIfAppleWasEaten();\r\n    };\r\n\r\n    useInterval(() => {\r\n        gameUpdate();\r\n    }, tick);\r\n\r\n    useEffect(() => {\r\n        if (gameStatus === \"playing\") {\r\n            setSnakeBody(initialSnakeBody);\r\n            setDirection(initialDirection);\r\n        }\r\n    }, [gameStatus, initialSnakeBody, initialDirection]);\r\n\r\n    return (\r\n        <div style={{ width: width * widthCount, height: height * heightCount }} className={styles.board}>\r\n            <div className={styles.inner}></div>\r\n            <Apple apple={apple} />\r\n            {snakeBody.map((particle) => (\r\n                <SnakeCell particle={particle} key={particle.id} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;\r\n","import { config, CellType } from \"../../helpers\";\r\nimport styles from \"./index.module.scss\";\r\n\r\nconst { width, height } = config;\r\n\r\nconst Apple = ({ apple }: { apple: CellType }) => {\r\n    return (\r\n        <div\r\n            key={apple.id}\r\n            className={styles.apple}\r\n            style={{\r\n                width: width,\r\n                height: height,\r\n                top: apple.y * height,\r\n                left: apple.x * width\r\n            }}></div>\r\n    );\r\n};\r\n\r\nexport default Apple;\r\n","import { config, SnakeCellType } from \"../../helpers\";\r\nimport styles from \"./index.module.scss\";\r\nimport cn from \"classnames\";\r\n\r\nconst { width, height, rightDir, leftDir } = config;\r\n\r\nconst SnakeCell = ({ particle }: { particle: SnakeCellType }) => {\r\n    return (\r\n        <div\r\n            className={cn(styles.cell, {\r\n                [styles.horizontal]: particle.dir === rightDir || particle.dir === leftDir\r\n            })}\r\n            style={{\r\n                width: width,\r\n                height: height,\r\n                top: particle.y * height,\r\n                left: particle.x * width\r\n            }}>\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SnakeCell;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Game } from \"./components\";\nimport \"./index.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Game />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__B0OC-\",\"header\":\"Game_header__3tDKq\",\"title\":\"Game_title__34brO\",\"button\":\"Game_button__1K4AD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"Board_board__3BcvK\",\"inner\":\"Board_inner__2-UUY\"};"],"sourceRoot":""}